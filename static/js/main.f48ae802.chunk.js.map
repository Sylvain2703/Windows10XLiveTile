{"version":3,"sources":["Components/TextBox/TextBox.js","Components/SymbolIcon/SymbolIcon.js","Components/Start/Start.js","Components/Tile/Text/Text.js","Components/Tile/Image/Image.js","Components/Tile/LiveTileContentSelector.js","Components/Tile/Tile.js","Components/TaskBarItem/TaskBarItem.js","Components/TaskBar/TaskBar.js","Components/Home/Home.js","index.js"],"names":["TextBox","placeholderText","leftIcon","rightIcon","className","placeholder","SymbolIcon","children","Start","src","alt","Text","props","content","type","hintWrap","hintStyle","hintAlign","subtleIndex","indexOf","substring","Image","placement","hintOverlay","hintCrop","opacityForOverlay","style","opacity","LiveTileContentSelector","item","Tile","image","title","liveTile","useState","rotate","setRotate","random","min","max","Math","floor","useEffect","length","time","timer","setTimeout","clearTimeout","map","visual","visualIndex","binding","find","c","template","key","itemIndex","branding","TaskBarItem","icon","isSelected","onClick","TaskBar","isStartOpened","isTaskViewOpened","onStartClick","onTaskViewClick","xmlns","viewBox","id","x1","y1","x2","y2","stopColor","offset","d","Home","startOpened","setStartOpened","DataTiles","tiles","tile","index","document","fullScreen","mozFullScreen","webkitIsFullScreen","exitFullscreen","cancelFullScreen","mozCancelFullScreen","webkitCancelFullScreen","documentElement","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","Element","ALLOW_KEYBOARD_INPUT","DataTaskBar","taskbarEntries","entries","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f48ae802.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TextBox.css\";\r\n\r\nfunction TextBox({ placeholderText, leftIcon, rightIcon }) {\r\n    return (\r\n        <div className=\"textbox\">\r\n            {leftIcon ? <button className=\"textbox__left-btn no-style\">{leftIcon}</button> : null}\r\n            <input className={\"textbox__input\" +\r\n                (leftIcon ? \" textbox__input--left-btn\" : \"\") +\r\n                (rightIcon ? \" textbox__input--right-btn\" : \"\")} placeholder={placeholderText} />\r\n            {rightIcon ? <button className=\"textbox__right-btn no-style\">{rightIcon}</button> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextBox;","import React from \"react\";\r\nimport \"./SymbolIcon.css\";\r\n\r\nfunction SymbolIcon({ children }) {\r\n    return (<span className=\"symbol-icon\">{children}</span>);\r\n}\r\n\r\nexport default SymbolIcon;","import React from \"react\";\r\nimport TextBox from \"../TextBox/TextBox\";\r\nimport SymbolIcon from \"../SymbolIcon/SymbolIcon\";\r\nimport \"./Start.css\";\r\n\r\nfunction Start({ children }) {\r\n    return (\r\n        <div className=\"start center\">\r\n            <div className=\"start__header\">\r\n                <img className=\"start__header__picture\" src=\"./user.jpg\" alt=\"User\" />\r\n                <TextBox placeholderText=\"Search the web and your stuff\"\r\n                    leftIcon={<SymbolIcon>&#xE721;</SymbolIcon>}\r\n                    rightIcon={<SymbolIcon>&#xE720;</SymbolIcon>} />\r\n            </div>\r\n            <div className=\"start__tiles\">\r\n                <div className=\"start__tiles__title\">My apps and websites</div>\r\n                <div>{children}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Start;","import React from \"react\";\r\nimport \"./Text.css\";\r\n\r\nfunction Text(props) {\r\n    const {\r\n        type,\r\n        content,\r\n        hintWrap = false,\r\n        hintStyle = \"caption\",\r\n        hintAlign = \"left\"\r\n    } = props.content;\r\n\r\n    if (type !== \"text\")\r\n        return null;\r\n\r\n    let className = \"tile__text\";\r\n\r\n    if (hintWrap)\r\n        className += \" --wrap\";\r\n\r\n    const subtleIndex = hintStyle.indexOf(\"Subtle\");\r\n    className += subtleIndex > -1\r\n        ? \" --subtle --\" + hintStyle.substring(0, subtleIndex)\r\n        : \" --\" + hintStyle;\r\n\r\n    className += \" --\" + hintAlign;\r\n\r\n    return (\r\n        <div className={className}>{content}</div>\r\n    )\r\n}\r\n\r\nexport default Text;","import React from \"react\";\r\nimport \"./Image.css\";\r\n\r\nfunction Image(props) {\r\n    const {\r\n        type,\r\n        src,\r\n        alt = \"\",\r\n        placement = \"inline\",\r\n        hintOverlay = 20,\r\n        hintCrop = \"none\"\r\n    } = props.content;\r\n\r\n    if (type !== \"image\")\r\n        return null;\r\n\r\n    let className = \"tile__image\";\r\n\r\n    if (placement === \"background\")\r\n        className += \" --background\";\r\n\r\n    if (hintCrop === \"circle\")\r\n        className += \" --crop-circle\"\r\n\r\n    const opacityForOverlay = 1 - (hintOverlay / 100);\r\n\r\n    return (\r\n        <div className={className}>\r\n            <img src={src} alt={alt} style={{ opacity: opacityForOverlay }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image;","import React from \"react\";\r\nimport Text from \"./Text/Text\";\r\nimport Image from \"./Image/Image\";\r\n\r\nfunction LiveTileContentSelector({ item }) {\r\n    if (item.type === \"text\")\r\n        return <Text content={item} />\r\n    else if (item.type === \"image\")\r\n        return <Image content={item} />\r\n\r\n    return null;\r\n}\r\n\r\nexport default LiveTileContentSelector;","import React, { useState, useEffect } from \"react\";\r\nimport LiveTileContentSelector from \"./LiveTileContentSelector\";\r\nimport \"./Tile.css\";\r\n\r\nfunction Tile({ image, title, liveTile }) {\r\n    const [rotate, setRotate] = useState(false);\r\n\r\n    useEffect(function () {\r\n        if (!liveTile || liveTile.length < 1)\r\n            return;\r\n\r\n        let time = rotate ? random(5, 15) : random(10, 30);\r\n        let timer = setTimeout(() => setRotate(!rotate), time * 1000);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [rotate, liveTile]);\r\n\r\n    function random(min, max) {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    return (\r\n        <button className={\"tile no-style\" + (rotate ? \" tile--rotate\" : \"\")}>\r\n            <div className=\"tile__front\">\r\n                <img className=\"tile__front__icon\" src={\"./icons/\" + image} alt={title} />\r\n                <div className=\"tile__front__title\">{title}</div>\r\n            </div>\r\n\r\n            {liveTile?.map((visual, visualIndex) => {\r\n                const binding = visual.content.find(c => c.template === \"TileMedium\");\r\n\r\n                return (\r\n                    <div key={visualIndex} className=\"tile__back\">\r\n                        {binding.content.map((item, itemIndex) =>\r\n                            <LiveTileContentSelector key={itemIndex} item={item} />\r\n                        )}\r\n\r\n                        {binding?.branding === \"logo\" || binding?.branding === \"nameAndLogo\"\r\n                            ? <img className=\"tile__back__icon\" src={\"./icons/\" + image} alt={title} />\r\n                            : null\r\n                        }\r\n                        {binding?.branding === \"name\" || binding?.branding === \"nameAndLogo\"\r\n                            ? <div className=\"tile__back__title\">{title}</div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                );\r\n            })}\r\n        </button >\r\n    );\r\n}\r\n\r\nexport default Tile;","import React from \"react\";\r\nimport SymbolIcon from \"../SymbolIcon/SymbolIcon\";\r\nimport \"./TaskBarItem.css\";\r\n\r\nfunction TaskBarItem({ children, image, icon, title, isSelected, onClick }) {\r\n    return (\r\n        <button className={\"taskbar-item no-style\" + (isSelected ? \" taskbar-item--selected\" : \"\")}\r\n            title={title} onClick={onClick}>\r\n            {image ? <img src={\"./icons/\" + image} alt={title} /> :\r\n                (icon ? <SymbolIcon>{icon}</SymbolIcon> : children)\r\n            }\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default TaskBarItem;","import React from \"react\";\r\nimport TaskBarItem from \"../TaskBarItem/TaskBarItem\";\r\nimport \"./TaskBar.css\";\r\n\r\nfunction TaskBar({ children, isStartOpened, isTaskViewOpened, onStartClick, onTaskViewClick }) {\r\n    return (\r\n        <div className=\"taskbar center\">\r\n            <TaskBarItem title=\"Start\" isSelected={isStartOpened} onClick={onStartClick}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 110 110\">\r\n                    <defs>\r\n                        <linearGradient id=\"selected\" x1=\"1\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop stopColor=\"rgb(0, 179, 235)\" offset=\"0%\" />\r\n                            <stop stopColor=\"rgb(2, 78, 151)\" offset=\"100%\" />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <path d=\"M11 23.4L46.69 18.54L46.7 52.96L11.03 53.17L11 23.4ZM46.67 56.93L46.7 91.38L11.03 86.48L11.03 56.7L46.67 56.93ZM51 17.91L98.31 11L98.31 52.53L51 52.9L51 17.91ZM98.33 57.26L98.31 98.59L51 91.92L50.93 57.18L98.33 57.26Z\" />\r\n                </svg>\r\n            </TaskBarItem>\r\n\r\n            {children}\r\n\r\n            <TaskBarItem icon=\"&#xE7C4;\" title=\"Task view\" isSelected={isTaskViewOpened} onClick={onTaskViewClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskBar;","import React, { useState } from \"react\";\r\nimport Start from \"../Start/Start\";\r\nimport Tile from \"../Tile/Tile\";\r\nimport TaskBar from \"../TaskBar/TaskBar\";\r\nimport TaskBarItem from \"../TaskBarItem/TaskBarItem\";\r\nimport DataTiles from \"../../StaticDatas/Tiles.json\";\r\nimport DataTaskBar from \"../../StaticDatas/TaskBar.json\";\r\nimport \"./Home.css\";\r\n\r\nfunction Home() {\r\n    const [startOpened, setStartOpened] = useState(false);\r\n\r\n    function isInFullScreen() {\r\n        return document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\r\n    }\r\n\r\n    function toggleFullScreen() {\r\n        if (!isInFullScreen()) {\r\n            if (document.documentElement.requestFullScreen)\r\n                document.documentElement.requestFullScreen();\r\n            else if (document.documentElement.mozRequestFullScreen)\r\n                document.documentElement.mozRequestFullScreen();\r\n            else if (document.documentElement.webkitRequestFullScreen)\r\n                document.documentElement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\r\n        }\r\n        else {\r\n            if (document.exitFullscreen)\r\n                document.exitFullscreen();\r\n            else if (document.cancelFullScreen)\r\n                document.cancelFullScreen();\r\n            else if (document.mozCancelFullScreen)\r\n                document.mozCancelFullScreen();\r\n            else if (document.webkitCancelFullScreen)\r\n                document.webkitCancelFullScreen();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {startOpened ?\r\n                <Start>\r\n                    {DataTiles.tiles.map((tile, index) =>\r\n                        <Tile key={index} image={tile.image} title={tile.title} liveTile={tile.liveTile} />\r\n                    )}\r\n                </Start>\r\n                : null\r\n            }\r\n\r\n            <TaskBar isStartOpened={startOpened}\r\n                onStartClick={() => setStartOpened(!startOpened)} onTaskViewClick={toggleFullScreen}>\r\n                {DataTaskBar.taskbarEntries.map((entries, index) =>\r\n                    <TaskBarItem key={index} image={entries.image} title={entries.title} />\r\n                )}\r\n            </TaskBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Home from \"./Components/Home/Home\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<Home />, document.getElementById(\"root\"));"],"sourceRoot":""}